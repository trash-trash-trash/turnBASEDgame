//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Controls/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""OverworldMovement"",
            ""id"": ""fbd81a52-e7fa-4aa1-b257-d4781b404e58"",
            ""actions"": [
                {
                    ""name"": ""MoveInput"",
                    ""type"": ""Value"",
                    ""id"": ""aadb81a7-868f-447f-b659-33af3d89988f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c5e94b3e-4b66-4d5c-b7e9-284b1a083e2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ba968ca6-90a3-4195-9a8c-92fcfa8d9394"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f834fe4f-32cb-475f-9d64-0cdd66d56bd8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f74cf86d-4174-4c88-82f1-42b4134b535c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c46af2ea-e82f-4365-9a0c-3587d7ed678d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""414d341d-fb96-4aa1-9d1f-69bfd16d59d4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""38e6a684-a335-4330-b98e-008fe879d1f9"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""78978cb5-54b3-4bbc-b6a9-6e5332784dfb"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d6111ffe-74bc-4dfd-b846-00071df4c8c3"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ccdaaae4-cc84-4424-b44c-dbc49e7156c6"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89bf2e90-d5e3-471e-8dc4-29adfa11586c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d12c193d-3ca6-465c-beca-d32c9ab5aa46"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e6ab8211-bfbc-4a00-9475-f29509b39c64"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8859bc40-aa81-4471-b5d7-76bd2ab3416a"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""afaa7eb4-3143-464f-87d7-ba9683734e38"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fecd6943-05ec-4c9b-8674-5b2c7b7fa3f5"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fd015009-9221-4703-9153-32eeb5d5f425"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c38d90e9-735f-4f02-a4d4-5eda021ecb7d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""208f480e-0d66-4140-bf9b-b3cf8175d6e7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dbbcd7c1-c221-4504-9391-9124abcc0f87"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b2479e31-5872-47ec-8061-69d3ca41f7e1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bf7d1543-f010-4e23-b618-42483a1f7082"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50e36309-815d-4d3e-8b43-68f5602b978d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de06f7ab-ab54-4e3f-9a1f-60331bf5b7f0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TurnBasedCombat"",
            ""id"": ""72411ef0-94ac-4ab7-a255-c906aebc0243"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""89a840b8-4a9f-4e17-bd40-71900d7621ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""da21b615-d999-4a4f-bd40-b9e2eb5dc627"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ef7cd02-ac59-4a33-b3b3-ce4e89870e9a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20aa9bde-3135-4500-9309-c7145de037ab"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Keyboard + Mouse"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ce95f40-5ac3-480a-a4d2-421cc3c6d115"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse;Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d000584c-75b4-4250-8859-6d81690a14f9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cb83d77-6b24-4c1d-a673-5cdd999615aa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84dc5c57-6124-4284-aa7b-3d07875d2297"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller;Keyboard + Mouse"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TetrisInventory"",
            ""id"": ""70d9a556-c270-4424-a71e-679af8e35c9c"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""f5b84837-e6e3-486a-af90-f29d503dda21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""37a32a9c-47b6-4d4a-a683-45ad1e161014"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tab"",
                    ""type"": ""Button"",
                    ""id"": ""e3582d02-02e0-4165-b042-8f0bb40f181f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b70d621-b4e9-42e5-bb7e-ff4ae9d336d4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""650fcf1a-cbac-48f0-a2b9-9277c4065fd8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6348cdb1-78c4-4da6-87d2-9a7f5a43a9c0"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard + Mouse"",
            ""bindingGroup"": ""Keyboard + Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        }
    ]
}");
        // OverworldMovement
        m_OverworldMovement = asset.FindActionMap("OverworldMovement", throwIfNotFound: true);
        m_OverworldMovement_MoveInput = m_OverworldMovement.FindAction("MoveInput", throwIfNotFound: true);
        m_OverworldMovement_Interact = m_OverworldMovement.FindAction("Interact", throwIfNotFound: true);
        // TurnBasedCombat
        m_TurnBasedCombat = asset.FindActionMap("TurnBasedCombat", throwIfNotFound: true);
        m_TurnBasedCombat_Confirm = m_TurnBasedCombat.FindAction("Confirm", throwIfNotFound: true);
        m_TurnBasedCombat_Cancel = m_TurnBasedCombat.FindAction("Cancel", throwIfNotFound: true);
        // TetrisInventory
        m_TetrisInventory = asset.FindActionMap("TetrisInventory", throwIfNotFound: true);
        m_TetrisInventory_Rotate = m_TetrisInventory.FindAction("Rotate", throwIfNotFound: true);
        m_TetrisInventory_Shift = m_TetrisInventory.FindAction("Shift", throwIfNotFound: true);
        m_TetrisInventory_Tab = m_TetrisInventory.FindAction("Tab", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OverworldMovement
    private readonly InputActionMap m_OverworldMovement;
    private List<IOverworldMovementActions> m_OverworldMovementActionsCallbackInterfaces = new List<IOverworldMovementActions>();
    private readonly InputAction m_OverworldMovement_MoveInput;
    private readonly InputAction m_OverworldMovement_Interact;
    public struct OverworldMovementActions
    {
        private @PlayerInputs m_Wrapper;
        public OverworldMovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveInput => m_Wrapper.m_OverworldMovement_MoveInput;
        public InputAction @Interact => m_Wrapper.m_OverworldMovement_Interact;
        public InputActionMap Get() { return m_Wrapper.m_OverworldMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OverworldMovementActions set) { return set.Get(); }
        public void AddCallbacks(IOverworldMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_OverworldMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OverworldMovementActionsCallbackInterfaces.Add(instance);
            @MoveInput.started += instance.OnMoveInput;
            @MoveInput.performed += instance.OnMoveInput;
            @MoveInput.canceled += instance.OnMoveInput;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IOverworldMovementActions instance)
        {
            @MoveInput.started -= instance.OnMoveInput;
            @MoveInput.performed -= instance.OnMoveInput;
            @MoveInput.canceled -= instance.OnMoveInput;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IOverworldMovementActions instance)
        {
            if (m_Wrapper.m_OverworldMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOverworldMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_OverworldMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OverworldMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OverworldMovementActions @OverworldMovement => new OverworldMovementActions(this);

    // TurnBasedCombat
    private readonly InputActionMap m_TurnBasedCombat;
    private List<ITurnBasedCombatActions> m_TurnBasedCombatActionsCallbackInterfaces = new List<ITurnBasedCombatActions>();
    private readonly InputAction m_TurnBasedCombat_Confirm;
    private readonly InputAction m_TurnBasedCombat_Cancel;
    public struct TurnBasedCombatActions
    {
        private @PlayerInputs m_Wrapper;
        public TurnBasedCombatActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_TurnBasedCombat_Confirm;
        public InputAction @Cancel => m_Wrapper.m_TurnBasedCombat_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_TurnBasedCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurnBasedCombatActions set) { return set.Get(); }
        public void AddCallbacks(ITurnBasedCombatActions instance)
        {
            if (instance == null || m_Wrapper.m_TurnBasedCombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurnBasedCombatActionsCallbackInterfaces.Add(instance);
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(ITurnBasedCombatActions instance)
        {
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(ITurnBasedCombatActions instance)
        {
            if (m_Wrapper.m_TurnBasedCombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurnBasedCombatActions instance)
        {
            foreach (var item in m_Wrapper.m_TurnBasedCombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurnBasedCombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurnBasedCombatActions @TurnBasedCombat => new TurnBasedCombatActions(this);

    // TetrisInventory
    private readonly InputActionMap m_TetrisInventory;
    private List<ITetrisInventoryActions> m_TetrisInventoryActionsCallbackInterfaces = new List<ITetrisInventoryActions>();
    private readonly InputAction m_TetrisInventory_Rotate;
    private readonly InputAction m_TetrisInventory_Shift;
    private readonly InputAction m_TetrisInventory_Tab;
    public struct TetrisInventoryActions
    {
        private @PlayerInputs m_Wrapper;
        public TetrisInventoryActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_TetrisInventory_Rotate;
        public InputAction @Shift => m_Wrapper.m_TetrisInventory_Shift;
        public InputAction @Tab => m_Wrapper.m_TetrisInventory_Tab;
        public InputActionMap Get() { return m_Wrapper.m_TetrisInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TetrisInventoryActions set) { return set.Get(); }
        public void AddCallbacks(ITetrisInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_TetrisInventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TetrisInventoryActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @Tab.started += instance.OnTab;
            @Tab.performed += instance.OnTab;
            @Tab.canceled += instance.OnTab;
        }

        private void UnregisterCallbacks(ITetrisInventoryActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @Tab.started -= instance.OnTab;
            @Tab.performed -= instance.OnTab;
            @Tab.canceled -= instance.OnTab;
        }

        public void RemoveCallbacks(ITetrisInventoryActions instance)
        {
            if (m_Wrapper.m_TetrisInventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITetrisInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_TetrisInventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TetrisInventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TetrisInventoryActions @TetrisInventory => new TetrisInventoryActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard + Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IOverworldMovementActions
    {
        void OnMoveInput(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface ITurnBasedCombatActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface ITetrisInventoryActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnTab(InputAction.CallbackContext context);
    }
}
