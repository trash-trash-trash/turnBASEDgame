0.1

-- added TurnController.cs, TurnTaker.cs, interface ITakeTurn, enum TurnTakerID

-- added logic to let TurnController flip the Dealer being in control when both Players end their turn, and let Players control when Dealer ends their turn

-- added TurnControllerView.cs to display logic

-- added GameObjectStateManager.cs

0.1

-- added Health.cs. Health uses sbyte to change health from 0 to 100 and alive to dead and vice versa

0.2

-- added StatsBase.cs (uses health system but modular for multiple stats). Added StatsEnum

-- added Stats HP, Mind, Accuracy, PhysDamage, PhysDefense, MagDamage, MagDefense, Speed, Luck

0.3

-- added IStatus, TraitsBase, TraitsInventory.cs. TraitsBase effects the target StatsBase. TraitsInventory holds Statuses which effect stats.

-- added NegativeTraitAfraid.cs. Decreases Accuracy and increases Speed.

-- added TMPro package

0.4

-- added Unity New Input System package

-- added PlayerInputs controls. added Movement and Interact. added PlayerControls which creates the inputs and announces events based on them

-- added WalkerBase.cs, PlayerInteract.cs and PlayerOverworldMovement.cs. Interact and Movement listen to Controls events. Added the ability to fire spherecasts based on last movement input and when Interact is pressed. if it hits an ITalk, triggers OpenDialogue().

-- Player can now walk around the overworld with 2D movement with PlayerMovement. Moves rigidbody in chosen direction. brakes to a stop when nothing is input. rb velocity is clamped by maxSpeed

-- added DialogueSingleton.cs and DialgueView. ITalk now opens a canvas thru DialogueSingleton and submits a custom string to be displayed

-- added logic that stops Player moving while talking

0.5

-- added MainMenu scene, MainMenuBrain.cs with state manager logic. added MainMenuState and Enum. added PressStart, MainMenu, Options, Quit and some logic for jumping between them

0.6 

-- added PartyMemberScriptableObjects and a PartyInventory. you can set custom stats (which are then set thru StatBase) for party members. you can also select a "main" party member which reshuffles the rest of the party.

TODO: allow player to customise party order

-- fixed a bug with PlayerInteract where the raycast would result in the spherecast being in unexpected places. replaced logic for a consistent interact sphere

0.7

-- added OverworldPatrol.cs. NPCs can now Patrol the overworld using WalkerBase, with custom patrol paths, moveSpeed, moveTime, waitTime, etc. You can also talk to NPCs to pause their patrol which resumes upon CloseDialogue.

0.8

-- added the ability for NPCs to have multiple lines of dialogue. dialogue prints one letter at a time at a custom speed

-- updated talking. pressing talking while an NPC is talking now speeds dialogue up. pressing talk when the line is finished will proceed to the next line.

-- added Player and NPC Layers, players ignore NPCs when walking (HACK; fix later)

0.9

-- added IPlayer

-- added LookTowards.cs, rotates transform to look at MovementVector2 from WalkerBase

--- added VisionBase.cs, NPCs can now "see" and detect the Player

1.0

-- added NPCBrain.cs, NPCStateEnum. Added Attack, Patrol, Talk, Follow, Death States to NPC. Added FollowState to allow NPCs to follow behind the Player at a custom distance. Definitely hacked some stuff along the way. TODO: ADD "RETURN HOME STATE"

1.1 

-- added NPC Types. Stationary will obv stand still. Enemy NPCs will enter "Attack" mode when the Player is spotted. TODO: transition to battle screen

1.2

-- added IStartFights interface. Added BattleManagerSingleton.cs, FightStarter.cs, PlayerFightStarter.cs. If the Player collides with a NPC with FightStarter, both FightStarters set the current Party (list of PartyScriptableObjects) in the BattleManager singleton, which serves as a middleman between overworld movement and turn-based battle scenes.

-- The Player and NPCs can now start fights

-- Starting a fight loads the turn-based scene and sets it to Active, ending the turn-based scene unloads it and set OverworldScene to Active

-- NPCs change their dialogue and behavior upon death

1.3

-- added Torch.cs as a proof of concept. Torch is hardcoded to a Unity Light and decreases its range according to the currentTorchLevel. will need to experiment with sprites

-- changed PlayerControls to be a singleton that persists between scenes. Added a StateManager and PlayerBrains.cs to the Player, as well as Overworld and Combat states (prevents inputs while in combat mode)

-- updated TurnController.cs to support multiple TurnTakers for each player

1.4

-- added Castrado and Cleric sprites and animations

-- added PartyController.cs. PartyController subscribes to PlayerControls to select int depending on input

-- hacked up a way to spawn TurnTakers with the correct sprites (HACK FIX LATER)

1.5

-- added 2D Sprite Outline free package and Unity's 2D Sprite package

-- vastly updated PlayerController.cs. added Action sprites and Action enum. current Actions are Attack, Spells, Items, Guard, Flee. PlayerController now selects and highlights 

-- hooked TurnController up to PlayerController to set player and enemy parties. 

1.6

-- made PartyController a base script, PlayerPartyController now inherits and uses player controls to control (will need more refinement later)

-- added EnemyAIPartyController to allow enemy AI control

-- added a second battle Text for enemy AI / player two

1.7

-- added ActionScriptableObjects.cs

-- TurnTakerView.cs now highlights sprites when selected

-- scrapped inheritances. Made PartyController.cs a state manager. Spent A LOT of time cleaning up PartyController and dividing it into states. Added SelectPartyMemberState, SelectActionState, SelectTargetState, CalculateState, WaitForNextTurnState, and logic for moving between them.

-- cleaned up TurnController.cs and TurnTaker.cs

1.8

-- added EnemyAIPartyController.cs

-- hooked EnemyAI stuff up to states and turncontroller

-- dummy AI can now take turns for the enemy party (TODO: behaviour for interesting picking of enemies)

1.9

-- housekeeping, updated MainMenu. Using vertical layout groups for buttons

-- added Controller support

2.0

-- added TurnTakersDictionary.cs singleton. cleaned up TurnTakerView.cs. 

2.1

-- started Tetris Inventory experimentation. made a grid that contains cubes that are in/accessible/equipped

-- made PlayerControls for rotating objects by 90 degrees when selected, added test rotate transform

2.2

-- refactored GridObject code. a parent gameobject now highlights / unhighlights and equips / unequips all child objs whenever a single one is highlight (ie, highlighting one with the mouse highlights all other child objects)

-- parent object now sets/unsets itself to InventoryObjectController to allow multiple different objs to be controlled

TO DO: logic for only having one equipped at a time, logic for snapping back to starting location + rotation if pick up is cancelled before put down, grid logic integration, problem with rotating being tied to rotating angle (tie to transform.rotation?)

2.3

-- added GridInventoryItems.cs. sorts the current list of GridParentObject items and intelligently places them on the InventoryGrid grid. when placing, scans the grid for Open squares. once found, scans the open square for the list of gridPosition Vector2's in ParentObj. if any squares are blocked, finds a new open square. repeats until it finds an open square that can fit the current shape.

2.4

-- fixed a bug with unequipping items only worked if it was highlighted by player

-- fixed movement vector2 to be normalized for grid snapping movement

-- polished movement, equip/unequip logic

-- TODO: modulate InventoryGridItems for intelligent obejct placement + update grid